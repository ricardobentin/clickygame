{"version":3,"sources":["components/ThundercatsCard/ThundercatsCard.js","components/ThundercatsWrapper/ThundercatsWrapper.js","components/Header/Header.js","components/Footer/Footer.js","components/Navbar/Navbar.js","components/Column.js","components/Row.js","App.js","serviceWorker.js","index.js"],"names":["ThundercatsCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","ThundercatsWrapper","concat","fluid","children","Header","Component","Footer","href","Navbar","userMessage","score","topScore","Column","size","split","map","join","Row","App","state","thundercats","currentScore","thundercatsClicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledThundercats","array","i","length","j","Math","floor","random","_ref","shuffleThunderCats","friends","_this2","this","components_ThundercatsWrapper_ThundercatsWrapper","components_Navbar_Navbar","title","components_Header_Header","components_Row","components_Column","key","components_ThundercatsCard_ThundercatsCard","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e51efd2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ThundercatsCard.css\";\r\n\r\nconst ThundercatsCard = props => (\r\n  <div\r\n    className=\"card\"\r\n    value={props.id}\r\n    onClick={() => props.handleClick(props.id)}\r\n  >\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ThundercatsCard;\r\n","import React from \"react\";\r\nimport \"./ThundercatsWrapper.css\";\r\n\r\nconst ThundercatsWrapper = props => (\r\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default ThundercatsWrapper;\r\n","import React, { Component } from \"react\";\r\nimport \"./Header.css\"\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"text-center\">\r\n        <h1>Clicky Game!</h1>\r\n        <h2>\r\n          Click on an image to earn points, but don't click on any image more than\r\n          once or your score will reset!!\r\n        </h2>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"footer\">\r\n        <a href=\"https://github.com/ricardobentin/clickygame\">\r\n          Clicky Game by Ricardo Bentin\r\n        </a>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n  <nav>\r\n    <ul>\r\n      <li className=\"brand\">\r\n        <img src=\"./tcats.jpg\" alt=\"thundercats\" href=\"/\" />\r\n      </li>\r\n      <li id=\"rw\">{props.userMessage}</li>\r\n\r\n      <li id=\"cur-sco\">Current Score: {props.score}</li>\r\n\r\n      <li id=\"top-sco\">Top Score: {props.topScore}</li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst Column = props => {\r\n  const size = props.size\r\n    .split(\" \")\r\n    .map(size => \"col-\" + size)\r\n    .join(\" \");\r\n  return <div className={size}>{props.children}</div>;\r\n};\r\n\r\nexport default Column;\r\n","import React from \"react\";\r\n\r\nconst Row = props => (\r\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>\r\n);\r\n\r\nexport default Row;\r\n","import React, { Component } from \"react\";\nimport ThundercatsCard from \"./components/ThundercatsCard\";\nimport ThundercatsWrapper from \"./components/ThundercatsWrapper\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Column from \"./components/Column\";\nimport Row from \"./components/Row\";\nimport thundercats from \"./thundercats.json\";\nimport \"./App.css\";\n\nfunction shuffleThunderCats(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  // Setting this.state.thundercatss to the thundercats json array\n  state = {\n    thundercats,\n    currentScore: 0,\n    topScore: 0,\n    thundercatsClicked: [],\n    userMessage: \"Click on Any image to get started!\"\n  };\n\n  //function to handle what happens on click\n  handleClick = id => {\n    if (this.state.thundercatsClicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({\n        thundercatsClicked: this.state.thundercatsClicked.concat(id)\n      });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      userMessage: \"Awesome! Keep Clicking Unique Images!\"\n    });\n    if (newScore > this.state.topScore) {\n      this.setState({ topScore: newScore });\n    } else if (this.state.currentScore > 11) {\n      this.setState({\n        userMessage: \"You win! There are no more unique images to click!\"\n      });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      userMessage:\n        \"You clicked this one already. Let's try to beat your top score until you can reach 12!\",\n      thundercatsClicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledThundercats = shuffleThunderCats(thundercats);\n    this.setState({ friends: shuffledThundercats });\n  };\n\n  // Map over this.state.thundercats and render a ThundercatsCard component for each thundercats object\n  render() {\n    return (\n      <ThundercatsWrapper>\n        <Navbar\n          title=\"Thundercats, WHOOOA!\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          userMessage={this.state.userMessage}\n        />\n        <Header />\n        <Row>\n          {this.state.thundercats.map(thundercats => (\n            <Column key={thundercats.id} size=\"md-3 sm-6\">\n              <ThundercatsCard\n                id={thundercats.id}\n                key={thundercats.id}\n                name={thundercats.name}\n                image={thundercats.image}\n                handleClick={this.handleClick}\n              />\n            </Column>\n          ))}\n        </Row>\n        <Footer />\n      </ThundercatsWrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}